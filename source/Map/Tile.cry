
class Tile
{
	field templates = []; // List<TileTemplate>

	field barriers = null; // Barrier[], lazily initialized
	field empty; // bool
	field animated; // bool
	field flattenedImage = new Image(16, 16);
	field col; // int
	field row; // int
	field physics; // PhysicsTypes[]

	constructor(col, row, templates) {
		this.col = col;
		this.row = row;
		this.Initialize(templates);
	}

	function InitializeBarriers() {
		this.barriers = [];
		for (template : this.templates) {
			for (barrier : template.Barriers) {
				this.barriers.add(barrier.Clone(this.col, this.row));
			}
		}
	}
	
	function IsCollisionWithRectangle(left, top, right, bottom)
	{
		if (this.barriers == null) this.InitializeBarriers();

		for (barrier : this.barriers)
		{
			if (barrier.IntersectsRectangle(left, top, right, bottom))
			{
				return true;
			}
		}
		return false;
	}

	function Initialize(templates)
	{
		this.physics = [PhysicsTypes.Ground, PhysicsTypes.Ground, PhysicsTypes.Ground, PhysicsTypes.Ground ];

		animated = false;
		for (template : templates) {
			this.templates.add(template);
			animated = animated || template.IsAnimated;
			this.hasCanopy = this.hasCanopy || template.IsCanopy;
		}

		this.empty = this.templates.Count == 0;
		if (!this.empty) {
			this.flattenedImage = new Image(16, 16);
		}
		this.animated = animated;
		if (!this.animated)
		{
			for (template : this.templates)
			{
				this.flattenedImage.Blit(template.GetImage(0), 0, 0);
			}
		}
	}

	function GetImage(renderCounter)
	{
		if (this.animated)
		{
			for (template : this.templates)
			{
				this.flattenedImage.Blit(template.GetImage(renderCounter), 0, 0);
			}
		}

		return this.flattenedImage;
	}

	field canopyImage = null; // Image
	field hasCanopy = false; // bool

	// TODO: will the canopy ever be animated?
	// if so, this should probably cache just the canopy templates instead and then
	// return the image as a function of those per renderCounter
	function GetCanopyImage(renderCounter) {
		if (this.hasCanopy) {
			if (this.canopyImage == null) {
				this.canopyImage = new Image(16, 16);
				for (template : this.templates) {
					if (template.IsCanopy) {
						this.canopyImage.Blit(template.GetImage(renderCounter), 0, 0);
					}
				}
			}
			return this.canopyImage;
		}
		return null;
	}

	// returns string[]
	function ReplaceTemplateWithCode(code, newTemplateId) {
		newTemplates = [];

		found = false;
		for (template : this.templates) {
			if (template.ContainsSpecialTile(code)) {
				found = true;
				if (newTemplateId != null) {
					newTemplates.add(newTemplateId);
				}
			} else {
				newTemplates.add(template.ID);
			}
		}

		return found
			? newTemplates
			: null;
	}

	function RemoveTemplateWithCode(code) {
		return this.ReplaceTemplateWithCode(code, null);
	}
}
