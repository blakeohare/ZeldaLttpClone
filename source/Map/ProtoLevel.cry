import Resources;

public class ProtoLevel {
	field layers = []; // each layer is a grid of tiles
	field Width;
	field Height;

	constructor(levelName) {
		values = {};
		t = Resources.readText("Data/Maps/" + levelName + ".txt");
		lines = t.trim().split('\n');

		for (line : lines) {
			formatted = line.trim();
			if (formatted.length == 0) {
				continue;
			}
			
			parts = formatted.split(':');
			if (parts.length > 1) {
				key = parts[0][1:];
				if (key.length > 0) {
					values[key] = parts[1:].join(':').trim();
				}
			}
		}

		this.Width = parseInt(values["width"]);
		this.Height = parseInt(values["height"]);

		layerNum = 1;
		width = this.Width;
		height = this.Height;
		tileFactory = TileFactory.Instance;
		
		while (values.get("layer" + layerNum) != null) {
			tiles = [];
			tileIdClumps = values["layer" + layerNum].split(',');

			for (y = 0; y < height; ++y) {
				for (x = 0; x < width; ++x) {
					index = y * width + x;
					templateIds = tileIdClumps[index].split('|');
					// TODO: C#-ism
					tile = [null] * templateIds.length;
					for (i = 0; i < templateIds.length; ++i) {
						tile[i] = tileFactory.GetTemplate(templateIds[i]);
					}
					tiles.add(tile);
				}
			}

			this.layers.add(tiles);

			++layerNum;
		}
	}

	function GenerateNewLevel() {
		layers = [];
		for (protoLayer : this.layers) {
			tiles = makeGrid(this.Width, this.Height);
			width = this.Width;
			height = this.Height;

			for (y = 0; y < height; ++y) {
				for (x = 0; x < width; ++x) {
					index = y * width + x;
					tiles[x][y] = new Tile(x, y, protoLayer[index]);
				}
			}
			layers.add(new Layer(this.Width, this.Height, tiles));
		}

		return new Level(layers);
	}
}
