class TileTemplate {
	field images; // Image[]
	field numImages;
	field barriers; // Barriers[]
	field tallBarriers; // Barriers[]
	field specialCodes; // HashSet<string>
	field IsAnimated;

	field ID; // string

	field isCanopy = false;
	
	constructor(id, images, physics, specialCodes)
	{
		this.ID = id;
		this.images = images;
		this.numImages = images.Length;
		this.IsAnimated = this.numImages.length > 1;
		this.InitializePhysics(physics);
		this.specialCodes = {};
		for (sc : specialCodes) { this.specialCodes[sc] = true; }
		this.InitializeFlags(specialCodes);
	}

	function InitializeFlags(codes)
	{
		for (code : codes)
		{
			switch (code)
			{
				case "canopy":
					this.isCanopy = true;
					break;

				case "tallgrass":
					// TODO: this
					break;

				default:
					throw new NotImplementedException("Unrecognized code: " + code);
			}
		}
	}

	function GetBarrierList(physics, left, top, width, height)
	{
		switch (physics)
		{
			case "g":
				return new [];

			case "t":
				return new [new Barrier(left, top, left + width, top + height, false, false, false, false)];

			default:
				return [];
		}
	}

	field leftList = [ 0, 8, 0, 8 ];
	field topList = [ 0, 0, 8, 8 ];

	function InitializePhysics(physics) {
		barriers = [];
		tallBarriers = [];
		
		if (physics.contains(',')) {
			physicses = physics.split(',');
			for (i = 0; i < 4; ++i) {
				tempPhysics = physicses[i];
				tempBarrierList = this.GetBarrierList(tempPhysics, leftList[i], topList[i], 8, 8);
				barriers.concat(tempBarrierList);
				if (tempPhysics == "t") {
					tallBarriers.concat(tempBarrierList);
				}
			}
		} else {
			tempBarrierList = this.GetBarrierList(physics, 0, 0, 16, 16);
			barriers.concat(tempBarrierList);
			if (physics == "t") {
				tallBarriers.concat(tempBarrierList);
			}
		}

		this.barriers = barriers;
		this.tallBarriers = tallBarriers;
	}

	function GetImage(renderCounter) {
		return images[(renderCounter / 10) % numImages];
	}

	// Special codes are used for identifying tile templates as having 
	// certain properties. Such as foliage that can be chopped away. 
	function ContainsSpecialTile(code)
	{
		return this.specialCodes.contains(code);
	}
}
