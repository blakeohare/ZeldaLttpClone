class Barrier {
	
	// ints
	field Left;
	field Top;
	field Right;
	field Bottom;

	// booleans
	field Diagonal;
	field TopLeftOpen;
	field TopRightOpen;
	field BottomLeftOpen;
	field BottomRightOpen;

	constructor(left, top, right, bottom, diagTopLeft, diagTopRight, diagBottomLeft, diagBottomRight) {
		this.Left = left;
		this.Top = top;
		this.Right = right;
		this.Bottom = bottom;
		this.Diagonal = diagTopLeft || diagTopRight || diagBottomLeft || diagBottomRight;
		this.TopLeftOpen = diagTopLeft;
		this.TopRightOpen = diagTopRight;
		this.BottomLeftOpen = diagBottomLeft;
		this.BottomRightOpen = diagBottomRight;
	}

	function Clone(tileOffsetX, tileOffsetY) {
		left = tileOffsetX * 16;
		top = tileOffsetY * 16;

		return new Barrier(
			this.Left + left,
			this.Top + top,
			this.Right + left,
			this.Bottom + top,
			this.TopLeftOpen,
			this.TopRightOpen,
			this.BottomLeftOpen,
			this.BottomRightOpen);
	}

	function IntersectsRectangle(left, top, right, bottom) {
		if (right < this.Left || left >= this.Right || bottom < this.Top || top >= this.Bottom) {
			return false;
		} else if (!this.Diagonal) {
			// if the rectangular regions overlap and this isn't a diagonal, we have a collision
			return true;
		} else {
			if (this.TopLeftOpen) {
				// TODO: the rest of these...
				return false;
			} else if (this.TopRightOpen) {
				return false;
			} else if (this.BottomLeftOpen) {
				return false;
			} else {
				return false;
			}
		}
	}
}
