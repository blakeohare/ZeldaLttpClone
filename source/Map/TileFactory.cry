import Resources;

class TileFactory {
	
	static field Instance;
	
	field templates = {};

	static constructor() {
		TileFactory.Instance = new TileFactory();
	}

	@private
	constructor() {
		this.InitializeTileImages();
	}

	function InitializeTileImages() {
		lines = Resources.readText("Images/tiles.txt").trim().split('\n');

		for (line : lines) {
			parts = line.trim().split('\t');
			if (parts.length == 3 || parts.length == 4) {
				id = parts[0];
				physics = parts[1];
				images = parts[2].split('|'); // TODO: because the ID is used, get rid of this column in the manifest
				codes = parts.length == 4 && parts[3].length != 0 ? parts[3].split(',') : [];
				animationLength = images.length;
				animation = [];
				if (animationLength == 1) {
					animation.add(new Image('Images/tiles/' + id + '.png'));
				} else {
					for (i = 1; i <= animationLength; ++i) {
						animation.add(new Image('Images/tiles/' + id + '_anim' + i + '.png'));
					}
				}
				this.templates[id] = new TileTemplate(id, animation, physics, codes);
			}
		}
	}

	function GetTemplate(id) {
		// I want unknown ID's to throw
		return this.templates[id];
	}

	function GenerateTile(col, row, ids) {
		tt = [];
		for (i = 0; i < ids.length; ++i) {
			tt.add(this.templates[ids[i]]);
		}

		return new Tile(col, row, tt);
	}
}
