import Resources;

class TileFactory {
	
	static field Instance;
	
	field templates = {};

	static constructor() {
		Instance = new TileFactory();
	}

	@private
	constructor() {
		this.InitializeTileImages();
	}

	function InitializeTileImages() {
		lines = Resources.readText("Zelda.Data.tile_manifest.txt").trim().split('\n');
		
		// TODO: C#-ism
		// Since you can't do an image atlas yourself, this will need to be re-done.
		// For the most part this will just get deleted.
		throw new NotImplementedException();

		/*
		Image tileSource = new Image("images/tiles.png");
		Image[] animation;
		int animationLength;
		string[] emptyCodes = new string[0];

		foreach (string line in lines)
		{
			parts = line.Trim().Split('\t');
			id = parts[0];
			physics = parts[1];
			images = parts[2].Split('|');
			animationLength = images.Length;
			animation = new Image[animationLength];
			codes = parts.Length == 4 ? parts[3].Split(',') : emptyCodes;
			for (i = 0; i < animationLength; ++i)
			{
				imageCoords = images[i].Split(',');
				col = int.Parse(imageCoords[0]);
				row = int.Parse(imageCoords[1]);
				animation[i] = new Image(16, 16);
				animation[i].Blit(tileSource, -col * 16, -row * 16);
			}

			this.templates.Add(id, new TileTemplate(id, animation, physics, codes));
		}*/
	}

	function GetTemplate(id) {
		// I want unknown ID's to throw
		return this.templates[id];
	}

	function GenerateTile(col, row, ids) {
		tt = [];
		for (i = 0; i < ids.length; ++i) {
			tt.add(this.templates[ids[i]]);
		}

		return new Tile(col, row, tt);
	}
}
