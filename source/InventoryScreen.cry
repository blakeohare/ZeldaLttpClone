import Math;

enum InventoryTransitionState {
	TransitionIn,
	TransitionOut,
	Normal
}

const INVENTORY_DEPLOY_SPEED = 6;

class InventoryScreen : GameSceneBase {
	static field frame = new Image("Images/inventory.png");

	field underlay;
	field transitionState = InventoryTransitionState.TransitionIn;
	field transitionCounter = -224;
	
	constructor(underlay) {
		this.underlay = underlay;
	}

	function Initialize() {}

	// This is an InputEvent[] from GameLight
	function ProcessInput(events) {
		for (e : events) {
			if (e.action == "start" && e.down) {
				this.transitionState = InventoryTransitionState.TransitionOut;
			}
		}
	}

	function Render(gameScreen) {
		this.underlay.PublicRender(gameScreen);
		InventoryScreen.frame.draw(0, this.transitionCounter);
	}

	function Update(gameCounter) {
		switch (this.transitionState) {
			case InventoryTransitionState.Normal:
				this.transitionCounter = 0;
				break;

			case InventoryTransitionState.TransitionIn:
				this.transitionCounter = Math.min(0, this.transitionCounter + INVENTORY_DEPLOY_SPEED);
				if (this.transitionCounter == 0)
				{
					this.transitionState = InventoryTransitionState.Normal;
				}
				break;

			case InventoryTransitionState.TransitionOut:
				this.transitionCounter = Math.max(-224, this.transitionCounter - INVENTORY_DEPLOY_SPEED);
				if (this.transitionCounter == -224)
				{
					this.SwitchToScene(this.underlay);
				}
				break;
		}

		this.underlay.SetAsInactiveUnderlay(this.transitionCounter);
	}
}
