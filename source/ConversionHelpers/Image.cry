import Graphics2D;

class Image {
	
	static field images = {};
	static field sheet = null;
	
	field width;
	field height;
	field g2dImg = null;
	field draw;

	constructor(path) {
		this.g2dImg = Image.images.get(path);
		if (this.g2dImg == null) {
			imgRes = Image.sheet.getImage(path);
			this.g2dImg = Graphics2D.GraphicsTexture.load(imgRes);
			Image.images[path] = this.g2dImg;
		}
		this.width = this.g2dImg.width;
		this.height = this.g2dImg.height;
		this.draw = this.g2dImg.draw;
	}
}

class AggregatedImage {

	field width;
	field height;
	field cropSafe = false;
	field blitImages = [];
	field blitX = [];
	field blitY = [];
	field length = 0;
	
	constructor(width, height, cropSafe = false) {
		this.width = width;
		this.height = height;
		this.cropSafe = cropSafe;
	}

	function Blit(otherImage, x, y) {
		if (!this.cropSafe) {
			if (x < 0 || y < 0) {
				throw new Exception(); // can't use AggregatedImage to crop
			}
			if (x + otherImage.width > this.width ||
				y + otherImage.height > this.height) {
				throw new Exception(); // can't use AggregatedImage to crop
			}
		}
		if (otherImage is AggregatedImage) {
			for (i = 0; i < otherImage.blitImages.length; ++i) {
				this.blitImages.add(otherImage.blitImages[i]);
				this.blitX.add(otherImage.blitX[i] + x);
				this.blitY.add(otherImage.blitY[i] + y);
			}
		} else {
			this.blitImages.add(otherImage);
			this.blitX.add(x);
			this.blitY.add(y);
		}
		this.length = this.blitX.length;
		return this;
	}
	
	function draw(x, y) {
		for (i = 0; i < this.length; ++i) {
			this.blitImages[i].draw(this.blitX[i] + x, this.blitY[i] + y);
		}
	}

	function clear() {
		this.blitImages.clear();
		this.blitX.clear();
		this.blitY.clear();
		this.length = 0;
	}
}