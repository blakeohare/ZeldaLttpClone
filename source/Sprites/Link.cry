
enum State {
	Standing,
	Walking
}

class Link : Sprite {

	field state = State.Standing;
	field renderCounter = 0;
	field lifetimeCounter = 0;

	constructor(x, y, level, layer)
		: base(x, y, 7, level, layer) {
		this.direction = Direction.Down;
	}

	function Update() {
		this.lifetimeCounter++;
	}

	function SetWalkingDirection(dx, dy) {
		if (dx == 0 && dy == 0) {
			this.state = State.Standing;
		} else {
			this.state = State.Walking;

			// TODO: there needs to be better direction logic here
			// when multiple directions are pressed, the correct final direction
			// should be the first direction applied that is still active.
			// With this current mechanism, left+right gets dominance over up+down
			if (dx < 0) this.direction = Direction.Left;
			else if (dx > 0) this.direction = Direction.Right;
			else if (dy > 0) this.direction = Direction.Down;
			else if (dy < 0) this.direction = Direction.Up;
		}

		this.DX = dx;
		this.DY = dy;
	}

	function Render(cameraOffsetX, cameraOffsetY) {
		sid = null; // sprite image data
		++this.renderCounter;

		// TODO: C#-ism don't put strings together on the fly like this
		switch (this.state) {
			case State.Standing:
				sid = SpriteImageFactory.GetImage("link " + this.GetDirectionString() + " 1");
				break;

			case State.Walking:
				num = (this.lifetimeCounter / 6) % 4;
				if (num == 1 || num == 3) num = 1;
				else if (num == 2) num = 3;
				else num = 2;
				sid = SpriteImageFactory.GetImage("link " + this.GetDirectionString() + " " + num);
				break;

			default:
				throw new NotImplementedException("sprite render state not defined");
		}

		image = sid.Image;
		offsetX = sid.OffsetX;
		offsetY = sid.OffsetY;

		image.draw(
			this.GetRenderLeft() + offsetX - cameraOffsetX,
			this.GetRenderTop() + offsetY - cameraOffsetY);
	}
}
