class Sprite // abstract
{
	// doubles
	field X;
	field Y;
	field DX;
	field DY;
	field CollisionRadius;

	field direction; // Direction enum
	
	static field directions = {
		Direction.Left: "left",
		Direction.Up: "up",
		Direction.Right: "right",
		Direction.Down: "down",
	};

	function GetDirectionString() { return Sprite.directions[this.direction]; }

	function GetRenderLeft() { return Math.floor(this.X + this.renderOffset.X); }
	function GetRenderTop() { return Math.floor(this.Y + this.renderOffset.Y); }
	function GetWidth() { return Math.floor(this.CollisionRadius * 2); }
	function GetHeight() { return (int)(this.CollisionRadius * 2); }

	field level;
	field layer;

	constructor(x, y, radius, level, layer)
	{
		this.CollisionRadius = radius;
		this.X = x;
		this.Y = y;
		this.renderOffset = new Point(-radius, -radius);
		this.level = level;
		this.layer = layer;
	}

	function Update() { throw new NotImplementedException(); }
	function Render(cameraOffsetX, cameraOffsetY) { throw new NotImplementedException(); }

	field renderOffset;

	function MoveRequest() {
		x = this.X + this.DX;
		y = this.Y + this.DY;

		left = (int)(x - this.CollisionRadius);
		top = (int)(y - this.CollisionRadius);
		right = left + (int)(this.CollisionRadius * 2);
		bottom = top + (int)(this.CollisionRadius * 2);

		if (this.layer.IsRectangleFree(left, top, right, bottom)) {
			this.X = x;
			this.Y = y;
		}
	}
}
