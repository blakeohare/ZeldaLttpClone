import Math;

class GameState {
	static field Instance;

	static constructor() {
		GameState.Instance = new GameState();
	}

	// TODO: the keys here are strings. Change them to enums
	field intValues = {};
	field stringValues = {};
	
	function GetIntValue(key) { return this.intValues.get(key, 0); }
	function GetStringValue(key) { return this.stringValues.get(key, ""); }
	function GetBoolValue(key) { return this.intValues.get(key) == 1; }

	function SetValue(key, value)
	{
		switch (typeof(value)) {
			case Type.INTEGER: this.intValues[key] = value; break;
			case Type.STRING: this.stringValues[key] = value; break;
			case Type.BOOLEAN: this.intValues[key] = value ? 1 : 0; break;
			default: throw new NotImplementedException();
		}
	}

	function getRupees() { return this.GetIntValue("rupees"); }
	function setRupees(value) { this.SetValue("rupees", value); }
	function getLife() { return this.GetIntValue("life"); }
	function setLife(value) {
		value = this.EnsureRange(value, 0, this.getHeartContainers() * 2);
		this.SetValue("life", value);
	}
	function getHeartContainers() { return this.GetIntValue("heart_containers"); }
	function setHeartContainers(value) { this.SetValue("heart_containers", value); }
	function getBombs() { return this.GetIntValue("bombs"); }
	function setBombs(value) { this.SetValue("bombs", this.EnsureRange(value, 0, this.getMaxBombs())); }
	function getMaxBombs() { return this.GetIntValue("max_bombs"); }
	function setMaxBombs(value) { return this.SetValue("bombs", value); }
	function getArrows() { return this.GetIntValue("arrows"); }
	function setArrows(value) { this.SetValue("arrows", this.EnsureRange(value, 0, this.getMaxBombs())); }
	function getMaxArrows() { return this.GetIntValue("max_arrows"); }
	function setMaxArrows(value) { return this.SetValue("arrows", value); }
	function hasSilverArrows() { this.GetBoolValue("has_silver_arrows"); }
	function setSilverArrows(value) { this.SetValue("has_silver_arrows", value == true); }

	// TODO: C#-ism: this is built into the Math library
	function EnsureRange(value, minimum, maximum)
	{
		if (value < minimum) return minimum;
		if (value > maximum) return maximum;
		return value;
	}
}
